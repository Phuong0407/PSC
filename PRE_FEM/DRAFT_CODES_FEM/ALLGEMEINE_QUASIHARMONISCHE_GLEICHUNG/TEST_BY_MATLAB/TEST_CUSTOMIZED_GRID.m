% Define points
points = [0.0000000000000000,0.0000000000000000;
          1.5000000000000000,0.0000000000000000;
          3.0000000000000000,0.0000000000000000;
          4.5000000000000000,1.0000000000000000;
          6.0000000000000000,2.0000000000000000;
          7.5000000000000000,2.0000000000000000;
          9.0000000000000000,2.0000000000000000;
          0.0000000000000000,2.0000000000000000;
          1.5000000000000000,2.0000000000000000;
          3.0000000000000000,2.0000000000000000;
          4.5000000000000000,2.5000000000000000;
          6.0000000000000000,3.0000000000000000;
          7.5000000000000000,3.0000000000000000;
          9.0000000000000000,3.0000000000000000;
          0.0000000000000000,4.0000000000000000;
          1.5000000000000000,4.0000000000000000;
          3.0000000000000000,4.0000000000000000;
          4.5000000000000000,4.0000000000000000;
          6.0000000000000000,4.0000000000000000;
          7.5000000000000000,4.0000000000000000;
          9.0000000000000000,4.0000000000000000];

% Define triangles
triangles = [1,2,9;
            1,9,8;
            2,3,10;
            2,10,9;
            3,4,11;
            3,11,10;
            4,5,12;
            4,12,11;
            5,6,13;
            5,13,12;
            6,7,14;
            6,14,13;
            8,9,16;
            8,16,15;
            9,10,17;
            9,17,16;
            10,11,18;
            10,18,17;
            11,12,19;
            11,19,18;
            12,13,20;
            12,20,19;
            13,14,21;
            13,21,20];

% Visualize the triangular grid
figure;
triplot(triangles, points(:, 1), points(:, 2), 'k'); % Plot triangles
hold on;
scatter(points(:, 1), points(:, 2), 'filled', 'MarkerFaceColor', 'b'); % Plot nodes
text(points(:, 1), points(:, 2), string(1:size(points, 1))); % Label points
hold off;

xlabel('X'); ylabel('Y');
title('Triangular Grid Visualization');
axis equal;

% Create a PDE model
model = createpde();

% Define the geometry using your points and triangles
geometry = triangulation(triangles, points);
model.Geometry = geometryFromMesh(model, points', triangles');

% Visualize the geometry with edge labels
figure;
pdegplot(model, 'EdgeLabels', 'on');
title('Edge Labels');

% Apply Dirichlet boundary conditions based on edge labels
% Update the edge IDs by observing the plot generated by pdegplot
lower_boundary_ids = [1, 3, 4]; % Replace with actual edge IDs for the lower boundary
applyBoundaryCondition(model, 'dirichlet', 'Edge', lower_boundary_ids, 'u', 0);

% Upper boundary (manually identify the edge IDs)
upper_boundary_ids = 5; % Replace with actual edge IDs for the upper boundary
applyBoundaryCondition(model, 'dirichlet', 'Edge', upper_boundary_ids, 'u', 4);

% Left boundary (x = 0)
left_boundary_ids = 2; % Replace with the actual edge ID for the left boundary
applyBoundaryCondition(model, 'dirichlet', 'Edge', left_boundary_ids, ...
    'u', @(location, state) location.y);

% Right boundary (x = max(points(:,1)))
right_boundary_ids = 6; % Replace with the actual edge ID for the right boundary
applyBoundaryCondition(model, 'dirichlet', 'Edge', right_boundary_ids, ...
    'u', @(location, state)  2 * (location.y - 2));

% Solve the Laplace equation for axisymmetric case
specifyCoefficients(model, 'm', 0, 'd', 0, 'c', 1, 'a', 0, 'f', 0);

% Solve the PDE
results = solvepde(model);

% Visualize the results
figure;
pdeplot(model, 'XYData', results.NodalSolution, 'Mesh', 'on');
xlabel('X'); ylabel('Y'); title('Solution to Axisymmetric Laplace Equation');

% Add gradient recovery
[gradX, gradY] = evaluateGradient(results);

% Visualize gradient (X-component)
figure;
pdeplot(model, 'XYData', gradX, 'Mesh', 'on');
xlabel('X'); ylabel('Y'); title('Gradient (X-Component)');

% Visualize gradient (Y-component)
figure;
pdeplot(model, 'XYData', gradY, 'Mesh', 'on');
xlabel('X'); ylabel('Y'); title('Gradient (Y-Component)');

% Combine gradient magnitude
gradMag = sqrt(gradX.^2 + gradY.^2);

% Visualize gradient magnitude
figure;
pdeplot(model, 'XYData', gradMag, 'Mesh', 'on');
xlabel('X'); ylabel('Y'); title('Gradient Magnitude');

% Combine grid coordinates and gradients
coordinates_with_gradients = [points, gradX, gradY, gradMag];

% Print header
fprintf('Node   X-Coord   Y-Coord   GradX   GradY   GradMag\n');
fprintf('--------------------------------------------------\n');

% Print each point with gradients
for i = 1:size(points, 1)
    fprintf('%-6d %-9.3f %-9.3f %-8.3f %-8.3f %-8.3f\n', ...
        i, points(i, 1), points(i, 2), gradX(i), gradY(i), gradMag(i));
end
